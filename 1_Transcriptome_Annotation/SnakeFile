import os

shell.executable("/bin/bash")

configfile: "config.yaml"
cupcake_sequence: "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence"
sqanti: "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/SQANTI3"

rule all:
    input: config["post_isoseq_output_dir"] + "/SQANTI/m54082_180607_173058.sqanti.qc.log"

sample_prefix: "{sample}"
##### IsoSeq3
rule ccs:
    input:
       subreads_bam = config["raw_dir"] + "/m54082_180607_173058.subreads.bam"
    output:
       ccs_bam = config["isoseq_output_dir"] + "/CCS/{sample}_ccs.bam",
       ccs_report_file = config["isoseq_output_dir"] + "/CCS/{sample}_ccs_report.txt"
    conda:
       "isoseq3_snakemake.yaml"
    params:
       cpasses = config["ccs_passes"]
    shell:"""
       ccs --num-threads=32 --noPolish --minPasses={params.cpasses} {input.subreads_bam} {output.ccs_bam} --reportFile {output.ccs_report_file}
    """

rule lima:
    input:
       ccs_bam = config["isoseq_output_dir"] + "/CCS/{sample}_ccs.bam",
       primer_fasta = config["primer_fasta"]
    output:
       fl_bam = config["isoseq_output_dir"] + "/LIMA/{sample}_fl.primer_5p--primer_3p.bam"
    params:
       output_dir = directory(config["isoseq_output_dir"] + "/LIMA/")
    conda:
       "isoseq3_snakemake.yaml"
    shell:"""
       cd {params.output_dir};
       lima {input.ccs_bam} {input.primer_fasta} {wildcards.sample}_fl.bam --isoseq --dump-clips --dump-removed --peek-guess
    """

rule refine:
    input:
       fl_bam = config["isoseq_output_dir"] + "/LIMA/{sample}_fl.primer_5p--primer_3p.bam",
       primer_fasta = config["primer_fasta"]
    output:
       flnc_bam = config["isoseq_output_dir"] + "/REFINE/{sample}_flnc.bam",
       log_file = config["isoseq_output_dir"] + "/REFINE/{sample}_refine.log"
    conda:
       "isoseq3_snakemake.yaml"
    shell:"""
       isoseq3 refine {input.fl_bam} {input.primer_fasta} {output.flnc_bam} --require-polya 2> {output.log_file}
    """

rule cluster:
    input:
       flnc_bam = config["isoseq_output_dir"] + "/REFINE/{sample}_flnc.bam"
    output:
       clustered_report = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.cluster_report.csv",
       clustered_fastq = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fasta"
    params:
       output_dir = directory(config["isoseq_output_dir"] + "/CLUSTER/")
    conda:
       "isoseq3_snakemake.yaml"
    log:
       config["isoseq_output_dir"] + "/CLUSTER/{sample}_cluster.log"
    shell:"""
       cd {params.output_dir};
       isoseq3 cluster {input.flnc_bam} {wildcards.sample}_clustered.bam --verbose;
       gunzip {wildcards.sample}_clustered.fasta.gz;
    """

rule fasta2fastq:
    input:
       clustered_fasta = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fasta"
    output:
       clustered_fastq = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq"
    params:
       cupcake_sequence = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence"
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
       python {params.cupcake_sequence}/fa2fq.py {input.clustered_fasta} > {output.clustered_fastq}
    """

##### Post-IsoSeq3
rule map_reads: ## map reads using minimap2
    input:
       reference = config["transcriptome"],
       fastq = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq"
    output:
       mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam"
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
       minimap2 -t 32 -ax splice -uf --secondary=no -C5 -O6,24 -B4 {input.reference} {input.fastq} > {output.mapped_sam}
    """

rule sort_map_reads:
   input:
       mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam"
   output:
       log_file = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam.log",
       sorted_mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sorted.sam"
   conda:
       "sqanti2_py3_snakemake.yaml"
   shell:"""
       sort -k 3,3 -k 4,4n {input.mapped_sam} > {output.sorted_mapped_sam} 2> {output.log_file}
    """

rule tofu_collapse:
    input:
        fq = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq",
        sorted_mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sorted.sam",
        clustered_report = config["isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.cluster_report.csv"
    output:
        collapse_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_collapse.log",
        abundance_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_abundance.log",
        filter_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_filter.log",
        collapsed_fa = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.rep.fa"
    conda:
       "sqanti2_py3_snakemake.yaml"
    params:
       output_dir = directory(config["post_isoseq_output_dir"] + "/TOFU/")
    shell:"""
       cd {params.output_dir};
       collapse_isoforms_by_sam.py --fq --input {input.fq} -s {input.sorted_mapped_sam} --dun-merge-5-shorter -o {wildcards.sample} &> {output.collapse_log_file};
       get_abundance_post_collapse.py {wildcards.sample}.collapsed {input.clustered_report} 2> {output.abundance_log_file};
       filter_away_subset.py {wildcards.sample}.collapsed 2> {output.filter_log_file};
       seqtk seq -a {wildcards.sample}.collapsed.filtered.rep.fq > {output.collapsed_fa}
    """

rule sqanti:
    input:
        collapsed_fa = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.rep.fa",
        reference_fa = config["transcriptome"],
        reference_gtf = config["annotation"],
    conda:
       "sqanti2_py3_snakemake.yaml"
    params:
        cupcake_sequence = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence",
        sqanti = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/SQANTI3"
    output:
        log_file =  config["post_isoseq_output_dir"] + "/SQANTI/{sample}.sqanti.qc.log"
    shell:"""
    export PYTHONPATH=$PYTHONPATH:{params.cupcake_sequence}
    python {params.sqanti}/sqanti3_qc.py -t 30 {input.collapsed_fa} &> {output.log_file}
    """
