import os
import sys

shell.executable("/bin/bash")

configfile: "config.yaml"

# https://stackoverflow.com/questions/40398091/how-to-do-a-partial-expand-in-snakemake
rule all:
    input:
        config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained.rep.fq",
        config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_R1.fq",
        config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "abundance.tsv",
        config["post_isoseq_output_dir"] + "/SQANTI/Sqanti.filter.log"

rule chain_collapse:
    input:
        config_file = config["chain_config"]
    output:
        log_file =  config["isoseq_output_dir"] + "/CHAIN/Chained_Configuration.log",
        chained_fa = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained.rep.fq",
        chained_gtf = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained.gff",
        chained_abundance = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained_count.txt"
    conda:
       "sqanti2_py3_snakemake.yaml"
    params:
        cupcake_counting = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/cupcake/tofu/counting",
        output_dir = config["post_isoseq_output_dir"] + "/CHAIN/"
    shell: """
        cd {params.output_dir};
        python {params.cupcake_counting}/chain_samples.py {input.config_file} count_fl --dun-merge-5-shorter 2> {output.log_file}
    """


##### RNASeq Expression Input
rule RNASeq_merge_fastq:
    params:
        script = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/Scripts/IsoSeq_Tg4510/1_Transcriptome_Annotation/Snakemake/RNASeq.sh",
        rnaseq_dir = config["RNASeq_Filtered_dir"],
        kallisto_output_dir = config["post_isoseq_output_dir"] + "/KALLISTO/",
        name = config["Kallisto_Output_Name"],
        samples = config["RNASeq_Expression_Samples"]
    output:
        R1_merged = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_R1.fq",
        R2_merged = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_R2.fq"
    shell:"""
        source {params.script};
        # RNASeq_merge_fastq <RNASEQ_input_dir> <Kallisto_output_dir> <sample_prefix_output_name> <samples...>
        RNASeq_merge_fastq {params.rnaseq_dir} {params.kallisto_output_dir} {params.name} {params.samples}
    """

rule kallisto:
    input:
        R1_merged = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_R1.fq",
        R2_merged = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_R2.fq",
        chained_fa = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained.rep.fq"
    output:
        kallisto_index = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_Kallisto.idx",
        index_log_file = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_Kallisto.index.log",
        quant_log_file = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "_Kallisto.quant.log",
        tsv = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "abundance.tsv"
    params:
        kallisto_dir = directory(config["post_isoseq_output_dir"] + "/KALLISTO"),
        output_name = config["Kallisto_Output_Name"]
    conda:
        "sqanti2_py3_snakemake.yaml"
    shell:"""
        kallisto index -i {params.kallisto_dir}/{params.output_name}_Kallisto.idx {input.chained_fa} 2> {output.index_log_file}
        kallisto quant -i {params.kallisto_dir}/{params.output_name}_Kallisto.idx --fr-stranded {input.R1_merged} --rf-stranded {input.R2_merged} -o {params.kallisto_dir} 2> {output.quant_log_file};
    """

rule sqanti_qc:
    input:
        chained_gtf = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained.gff",
        chained_abundance = config["post_isoseq_output_dir"] + "/CHAIN/all_samples.chained_count.txt",
        reference_fa = config["transcriptome"],
        reference_gtf = config["annotation"],
        kallisto_tsv = config["post_isoseq_output_dir"] + "/KALLISTO/" + config["Kallisto_Output_Name"] + "abundance.tsv"
    output:
        log_file = config["post_isoseq_output_dir"] + "/SQANTI/Sqanti.qc.log",
        sqanti_classification = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_classification.txt",
        sqanti_fasta = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_corrected.fasta",
        sqanti_gtf = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_corrected.gtf",
    params:
        cupcake_sequence = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence",
        sqanti_dir = config["isoseq_output_dir"] + "/SQANTI/",
        sqanti_software_dir = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/SQANTI3",
        cage_peak = config["cage_peaks"],
        polyA = config["polyA_motif"],
        junction_coverage = config["RNASeq_STAR_files"]
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
        cd {params.sqanti_dir};
        export PYTHONPATH=$PYTHONPATH:{params.cupcake_sequence};
        python {params.sqanti_software_dir}/sqanti3_qc.py -t 30 --gtf {input.chained_gtf} {input.reference_gtf} {input.reference_fa} -fl {input.chained_abundance} --cage_peak {params.cage_peak} --polyA_motif_list {params.polyA} -c {params.junction_coverage} -e {input.kallisto_tsv} 2> {output.log_file}
    """

rule sqanti_filter:
    input:
        sqanti_classification = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_classification.txt",
        sqanti_fasta = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_corrected.fasta",
        sqanti_gtf = config["post_isoseq_output_dir"] + "/SQANTI/all_samples.chained_corrected.gtf",
    output:
        log_file = config["post_isoseq_output_dir"] + "/SQANTI/Sqanti.filter.log"
    params:
        cupcake_sequence = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence",
        sqanti_dir = config["isoseq_output_dir"] + "/SQANTI/",
        sqanti_software_dir = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/SQANTI3",
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
        cd {params.sqanti_dir};
        export PYTHONPATH=$PYTHONPATH:{params.cupcake_sequence};
        python {params.sqanti_software_dir}/sqanti3_RulesFilter.py -a 0.6 -c 3 {input.sqanti_classification} {input.sqanti_fasta} {input.sqanti_gtf} 2> {output.log_file}
    """
