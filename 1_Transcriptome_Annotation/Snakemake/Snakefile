import os
import sys

shell.executable("/bin/bash")

configfile: "config.yaml"

# https://stackoverflow.com/questions/40398091/how-to-do-a-partial-expand-in-snakemake
rule all:
    input:
        expand(config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.rep.fq", sample=config["samples"].keys())

##### IsoSeq3
rule ccs:
    input:
       subreads_bam = lambda wc: config["raw_dir"] + "/" + config["samples"][wc.sample]
    output:
       ccs_bam = config["isoseq_output_dir"] + "/CCS/{sample}_ccs.bam",
       ccs_report_file = config["isoseq_output_dir"] + "/CCS/{sample}_ccs_report.txt"
    conda:
       "isoseq3_snakemake.yaml"
    params:
       cpasses = config["ccs_passes"]
    shell:"""
       echo "Processing CCS on {input.subreads_bam}, called to {wildcards.sample}";
       ccs --num-threads=32 --noPolish --minPasses={params.cpasses} {input.subreads_bam} {output.ccs_bam} --reportFile {output.ccs_report_file}
    """

rule lima:
    input:
       ccs_bam = config["isoseq_output_dir"] + "/CCS/{sample}_ccs.bam",
       primer_fasta = config["primer_fasta"]
    output:
       fl_bam = config["isoseq_output_dir"] + "/LIMA/{sample}_fl.primer_5p--primer_3p.bam"
    params:
       output_dir = directory(config["isoseq_output_dir"] + "/LIMA/")
    conda:
       "isoseq3_snakemake.yaml"
    shell:"""
       cd {params.output_dir};
       lima {input.ccs_bam} {input.primer_fasta} {wildcards.sample}_fl.bam --isoseq --dump-clips --dump-removed --peek-guess
    """

rule refine:
    input:
       fl_bam = config["isoseq_output_dir"] + "/LIMA/{sample}_fl.primer_5p--primer_3p.bam",
       primer_fasta = config["primer_fasta"]
    output:
       flnc_bam = config["isoseq_output_dir"] + "/REFINE/{sample}_flnc.bam",
       log_file = config["isoseq_output_dir"] + "/REFINE/{sample}_refine.log"
    conda:
       "isoseq3_snakemake.yaml"
    shell:"""
       isoseq3 refine {input.fl_bam} {input.primer_fasta} {output.flnc_bam} --require-polya 2> {output.log_file}
    """

rule cluster:
    input:
       flnc_bam = config["isoseq_output_dir"] + "/REFINE/{sample}_flnc.bam"
    output:
       clustered_report = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.cluster_report.csv",
       clustered_fastq = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fasta"
    params:
       output_dir = config["post_isoseq_output_dir"] + "/CLUSTER/"
    conda:
       "sqanti2_py3_snakemake.yaml"
    threads: 8
    log:
       config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_cluster.log"
    shell:"""
       cd {params.output_dir};
       isoseq3 cluster {input.flnc_bam} {wildcards.sample}_clustered.bam --verbose;
       gunzip {wildcards.sample}_clustered.fasta.gz;
    """

rule fasta2fastq:
    input:
       clustered_fasta = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fasta"
    output:
       clustered_fastq = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq"
    params:
       cupcake_sequence = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/sequence"
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
       python {params.cupcake_sequence}/fa2fq.py {input.clustered_fasta} > {output.clustered_fastq}
    """

##################################### Post-IsoSeq3
##### Mapping with Minimap2

rule minimap2_index:
    input:
       reference_fa = config["transcriptome"]
    output:
       reference_mmi = config["post_isoseq_output_dir"] + "/MAPPING/mm10.mmi"
    conda:
       "sqanti2_py3_snakemake.yaml"
    params:
        output_dir = config["post_isoseq_output_dir"] + "/MAPPING/",
        reference_name = "mm10.mmi"
    shell:"""
       cd {params.output_dir};
       minimap2 -d {params.reference_name} {input.reference_fa}
    """


rule map_reads:
    input:
       reference = config["post_isoseq_output_dir"] + "/MAPPING/mm10.mmi",
       fastq = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq"
    output:
       mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam",
       log_file = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam.log"
    conda:
       "sqanti2_py3_snakemake.yaml"
    params:
       output_dir = config["post_isoseq_output_dir"] + "/MAPPING/"
    shell:"""
       cd {params.output_dir};
       minimap2 -t 8 -ax splice -uf --secondary=no -C5 -O6,24 -B4 {input.reference} {input.fastq} > {output.mapped_sam} 2> {output.log_file}
    """

rule sort_map_reads:
    input:
        mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sam"
    output:
        sorted_mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sorted.sam"
    params:
       output_dir = config["post_isoseq_output_dir"] + "/MAPPING/"
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
       cd {params.output_dir};
       sort -k 3,3 -k 4,4n {input.mapped_sam} > {output.sorted_mapped_sam}
    """

##### TOFU Collapse
rule tofu_collapse:
    input:
        fq = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.fastq",
        sorted_mapped_sam = config["post_isoseq_output_dir"] + "/MAPPING/{sample}.clustered.hq.fastq.sorted.sam",
        clustered_report = config["post_isoseq_output_dir"] + "/CLUSTER/{sample}_clustered.cluster_report.csv"
    output:
        collapse_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_collapse.log",
        abundance_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_abundance.log",
        filter_log_file = config["post_isoseq_output_dir"] + "/TOFU/{sample}_filter.log",
        collapsed_fa = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.rep.fa",
        group = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.group.txt",
        abundance = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.abundance.txt",
        fasta = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.rep.fq",
        gff = config["post_isoseq_output_dir"] + "/TOFU/{sample}.collapsed.filtered.gff",
        chain_group = config["post_isoseq_output_dir"] + "/CHAIN/{sample}/Sample.collapsed.group.txt",
        chain_abundance = config["post_isoseq_output_dir"] + "/CHAIN/{sample}/Sample.collapsed.filtered.abundance.txt",
        chain_fasta = config["post_isoseq_output_dir"] + "/CHAIN/{sample}/Sample.collapsed.filtered.rep.fq",
        chain_gff = config["post_isoseq_output_dir"] + "/CHAIN/{sample}/Sample.collapsed.filtered.gff"
    params:
        output_dir = config["post_isoseq_output_dir"] + "/TOFU/",
        dir = directory(config["post_isoseq_output_dir"] + "/CHAIN/{sample}"),
        cupcake = "/gpfs/mrc0/projects/Research_Project-MRC148213/sl693/softwares/Post_Isoseq3/cDNA_Cupcake/cupcake/tofu"
    conda:
       "sqanti2_py3_snakemake.yaml"
    shell:"""
       cd {params.output_dir};
       python {params.cupcake}/collapse_isoforms_by_sam.py --fq --input {input.fq} -s {input.sorted_mapped_sam} --dun-merge-5-shorter -o {wildcards.sample} &> {output.collapse_log_file};
       python {params.cupcake}/get_abundance_post_collapse.py {wildcards.sample}.collapsed {input.clustered_report} 2> {output.abundance_log_file};
       python {params.cupcake}/filter_away_subset.py {wildcards.sample}.collapsed 2> {output.filter_log_file};
       seqtk seq -a {wildcards.sample}.collapsed.filtered.rep.fq > {output.collapsed_fa};
       cp {output.group} {output.chain_group};
       cp {output.abundance} {output.chain_abundance};
       cp {output.fasta} {output.chain_fasta};
       cp {output.gff} {output.chain_gff}
    """





 
